# --- Builder stage (compilar Rust desde fuente) ---
FROM --platform=linux/amd64 ubuntu:20.04 AS builder

# Configurar shell a bash
SHELL ["/bin/bash", "-c"]

# Instalar dependencias necesarias
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -yqq \
    build-essential cmake gcc g++ libssl-dev git python3 \
    curl pkg-config ninja-build gcc-aarch64-linux-gnu g++-aarch64-linux-gnu && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Clonar Rust desde fuente
RUN git clone --depth=1 --branch stable https://github.com/rust-lang/rust /mono-rust
WORKDIR /mono-rust

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-license /root/.qnx

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-sdk /opt/qnx-sdk

# Deshabilitamos el backtrace para QNX
COPY .devcontainer/patchs/rust_backtrace.patch /mono-rust/rust_backtrace.patch

# Aplicar parches
RUN git apply rust_backtrace.patch

# Configurar entorno de compilación
RUN mkdir -p /opt/qnx-sdk

# Configurar entorno de compilación
RUN export QNX_SDP_HOME=/opt/qnx-sdk && \ 
    export QNX_HOST="${QNX_SDP_HOME}/host/linux/x86_64" && \
    export QNX_TARGET="${QNX_SDP_HOME}/target/qnx" && \
    export PATH="${QNX_HOST}/usr/bin:${PATH}"

# Cargar entorno del SDK de QNX
RUN echo 'source ${QNX_SDP_HOME}/qnxsdp-env.sh' >> /root/.bashrc

# Overwrite config.toml to enable all targets + cargo, host & cross compiler for QNX
RUN echo 'profile = "compiler"' >> config.toml && \
    echo 'change-id = 115898' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[build]' >> config.toml && \
    echo 'docs = false' >> config.toml && \
    echo 'extended = true' >> config.toml && \
    echo 'tools = ["cargo"]' >> config.toml && \
    echo 'target = ["x86_64-unknown-linux-gnu","aarch64-unknown-linux-gnu","x86_64-pc-nto-qnx710","aarch64-unknown-nto-qnx710"]' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[install]' >> config.toml && \
    echo 'prefix = "/opt/qnx-rust"' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[target.x86_64-unknown-linux-gnu]' >> config.toml && \
    echo 'cc = "gcc"' >> config.toml && \
    echo 'cxx = "g++"' >> config.toml && \
    echo 'ar = "ar"' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[target.aarch64-unknown-linux-gnu]' >> config.toml && \
    echo 'cc = "aarch64-linux-gnu-gcc"' >> config.toml && \
    echo 'cxx = "aarch64-linux-gnu-g++"' >> config.toml && \
    echo 'ar = "aarch64-linux-gnu-ar"' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[target.x86_64-pc-nto-qnx710]' >> config.toml && \
    echo 'cc = "qcc"' >> config.toml && \
    echo 'cxx = "q++"' >> config.toml && \
    echo 'ar = "ntox86_64-ar"' >> config.toml && \
    echo -e '\n' >> config.toml && \
    echo '[target.aarch64-unknown-nto-qnx710]' >> config.toml && \
    echo 'cc = "qcc"' >> config.toml && \
    echo 'cxx = "q++"' >> config.toml && \
    echo 'ar = "ntoaarch64-ar"' >> config.toml

# Build and install everything
RUN source /opt/qnx-sdk/qnxsdp-env.sh && ./x.py build --stage 2
RUN source /opt/qnx-sdk/qnxsdp-env.sh && ./x.py install --stage 2

# --- Runner stage (devcontainer) ---
FROM --platform=linux/amd64 brainflow/brainflow:5.16.0 AS qnx-devcontainer

# Configurar shell a bash
SHELL ["/bin/bash", "-c"]

# Instalar dependencias y herramientas
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && apt install -yqq \
        build-essential cmake gcc g++ gdb \
        curl libssl-dev python3 python3-pip \
        openssh-client bridge-utils net-tools \
        inetutils-ping qemu-system-aarch64 \
        qemu-system-x86 bridge-utils iproute2 dnsmasq \
        gcc-aarch64-linux-gnu && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Configurar pip y Conan
RUN pip3 install --upgrade pip && pip3 install "conan>=2.0"

# Configurar directorios y entorno para QNX SDK
RUN mkdir -p /opt/qnx-sdk

# Configurar entorno de compilación
RUN export QNX_SDP_HOME=/opt/qnx-sdk && \ 
    export QNX_HOST="${QNX_SDP_HOME}/host/linux/x86_64" && \
    export QNX_TARGET="${QNX_SDP_HOME}/target/qnx" && \
    export PATH="${QNX_HOST}/usr/bin:/opt/qnx-rust/bin:${PATH}"

# Cargar entorno del SDK de QNX
RUN echo 'source /opt/qnx-sdk/qnxsdp-env.sh' >> /root/.bashrc
RUN echo 'PATH="/opt/qnx-rust/bin:${PATH}"' >> /root/.bashrc

# Copiar Rust ya instalado
COPY --from=builder /opt/qnx-rust /opt/qnx-rust

# Configurar perfiles de Conan para QNX
RUN mkdir -p /root/.conan2/profiles
COPY .devcontainer/conan-profiles /root/.conan2/profiles

# Copiar docker_entrypoint.sh
COPY .devcontainer/docker_entrypoint.sh /usr/local/bin/docker_entrypoint.sh
RUN chmod +x /usr/local/bin/docker_entrypoint.sh

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-license /root/.qnx

# Configurar entorno de compilación
ENV CARGO_TARGET_X86_64_PC_NTO_QNX710_LINKER=qcc
ENV CARGO_TARGET_AARCH64_UNKNOWN_NTO_QNX710_LINKER=qcc
ENV CARGO_TARGET_X86_64_PC_NTO_QNX710_RUSTFLAGS="-C linker-flavor=gcc"
ENV CARGO_TARGET_AARCH64_UNKNOWN_NTO_QNX710_RUSTFLAGS="-C linker-flavor=gcc"

# Comando por defecto para systemd
ENTRYPOINT ["/usr/local/bin/docker_entrypoint.sh"]
        