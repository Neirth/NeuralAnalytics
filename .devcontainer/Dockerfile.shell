# --- Builder stage (compilar Rust desde fuente) ---
FROM --platform=linux/amd64 ubuntu:22.04 AS builder

# Configurar shell a bash
SHELL ["/bin/bash", "-c"]

# Instalar dependencias necesarias
RUN apt-get update && apt-get install -yqq \
    build-essential cmake gcc g++ libssl-dev git python3 \
    curl pkg-config ninja-build gcc-aarch64-linux-gnu && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Clonar Rust desde fuente
RUN git clone --depth=1 --branch stable https://github.com/rust-lang/rust /mono-rust
WORKDIR /mono-rust

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-license /root/.qnx

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-sdk /opt/qnx-sdk

# Configurar entorno de compilación
RUN mkdir -p /opt/qnx-sdk

# Configurar entorno de compilación
RUN export QNX_SDP_HOME=/opt/qnx-sdk && \ 
    export QNX_HOST="${QNX_SDP_HOME}/host/linux/x86_64" && \
    export QNX_TARGET="${QNX_SDP_HOME}/target/qnx" && \
    export PATH="${QNX_HOST}/usr/bin:${PATH}"

# Cargar entorno del SDK de QNX
RUN echo 'source ${QNX_SDP_HOME}/qnxsdp-env.sh' >> /root/.bashrc

# Configurar entorno de compilación de Rust
RUN export build_env=' \
    CC_aarch64-unknown-nto-qnx710=qcc \
    CFLAGS_aarch64-unknown-nto-qnx710=-Vgcc_ntoaarch64le_cxx \
    CXX_aarch64-unknown-nto-qnx710=qcc \
    AR_aarch64_unknown_nto_qnx710=ntoaarch64-ar \
    CC_x86_64-pc-nto-qnx710=qcc \
    CFLAGS_x86_64-pc-nto-qnx710=-Vgcc_ntox86_64_cxx \
    CXX_x86_64-pc-nto-qnx710=qcc \
    AR_x86_64_pc_nto_qnx710=ntox86_64-ar \
' && env $build_env

# Configura el compilador de rust
ENV DESTDIR=/opt/qnx-rust

# Construir el compilador y librerías
RUN source /opt/qnx-sdk/qnxsdp-env.sh && \
    env $build_env && \
    ./x.py build \
        --target x86_64-pc-nto-qnx710,aarch64-unknown-nto-qnx710,x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu \
        rustc library/core library/alloc library/std && \
    ./x.py install

# --- Runner stage (devcontainer) ---
FROM --platform=linux/amd64 ubuntu:22.04 AS qnx-devcontainer

# Configurar shell a bash
SHELL ["/bin/bash", "-c"]

# Instalar dependencias y herramientas
RUN apt update && apt install -yqq \
        build-essential cmake gcc g++ gdb \
        curl libssl-dev python3 python3-pip \
        buildah openssh-client bridge-utils \
        net-tools inetutils-ping qemu-system-aarch64 \
        qemu-system-x86 bridge-utils iproute2 dnsmasq \
        gcc-aarch64-linux-gnu && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Configurar pip y Conan
RUN pip3 install --upgrade pip && pip3 install "conan>=2.0"

# Configurar directorios y entorno para QNX SDK
RUN mkdir -p /opt/qnx-sdk

# Configurar entorno de compilación
RUN export QNX_SDP_HOME=/opt/qnx-sdk && \ 
    export QNX_HOST="${QNX_SDP_HOME}/host/linux/x86_64" && \
    export QNX_TARGET="${QNX_SDP_HOME}/target/qnx" && \
    export PATH="${QNX_HOST}/usr/bin:/opt/qnx-rust/bin:${PATH}"

# Configurar entorno de compilación de Rust
RUN export build_env=' \
    CC_aarch64-unknown-nto-qnx710=qcc \
    CFLAGS_aarch64-unknown-nto-qnx710=-Vgcc_ntoaarch64le_cxx \
    CXX_aarch64-unknown-nto-qnx710=qcc \
    AR_aarch64_unknown_nto_qnx710=ntoaarch64-ar \
    CC_x86_64-pc-nto-qnx710=qcc \
    CFLAGS_x86_64-pc-nto-qnx710=-Vgcc_ntox86_64_cxx \
    CXX_x86_64-pc-nto-qnx710=qcc \
    AR_x86_64_pc_nto_qnx710=ntox86_64-ar \
' && env $build_env

# Cargar entorno del SDK de QNX
RUN echo 'source ${QNX_SDP_HOME}/qnxsdp-env.sh' >> /root/.bashrc

# Copiar Rust ya instalado
COPY --from=builder /opt/qnx-rust /opt/qnx-rust

# Configurar perfiles de Conan para QNX
RUN mkdir -p /root/.conan2/profiles
COPY .devcontainer/conan-profiles /root/.conan2/profiles

# Copiar docker_entrypoint.sh
COPY .devcontainer/docker_entrypoint.sh /usr/local/bin/docker_entrypoint.sh
RUN chmod +x /usr/local/bin/docker_entrypoint.sh

# Añadir configuración de montaje del SDK de QNX
COPY .devcontainer/qnx-license /root/.qnx

# Comando por defecto para systemd
ENTRYPOINT ["/usr/local/bin/docker_entrypoint.sh"]
