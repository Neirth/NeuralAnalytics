import { VerticalBox, GroupBox, HorizontalBox } from "std-widgets.slint";
import { ElectrodeFeedback, MorphicBackground, PageComponent, ElectrodeChart } from "../components/index.slint";

export component DataCapturerView inherits PageComponent {
    // Properties
    property <int> update-counter: 0;
    property <string> thinking_color_class: "RED";
    property <color> thinking_color_reference: #FF0000;

    // Callbacks for plot the chart
    pure callback render_signal_plot(name: string, values: [float], width: length, height: length) -> image;


    // Pure functions for pass to color the correct class
    pure function get_rgb_class_color(color: string) -> color {
        if (color == "RED" ) {
            return #FF0000;
        } else if (color == "GREEN") {
            return #00FF00;
        } else {
            return #FF00FF;
        }
    }

    // Public function for set the thinking color or data
    public function update_headset_data(t3: [float], t4: [float], o1: [float], o2: [float]) {
        if (t3.length > 0) {
            t3_electrode.update_electrode_data("T3", t3);
        }

        if (t4.length > 0) {
            t4_electrode.update_electrode_data("T4", t4);
        }

        if (o1.length > 0) {
            o1_electrode.update_electrode_data("O1", o1);
        }

        if (o2.length > 0) {
            o2_electrode.update_electrode_data("O2", o2);
        }
    }

    public function update_thinking_color(color: string) {
        if (color == "RED") {
            root.thinking_color_class = "RED";
        } else if (color == "GREEN") {
            root.thinking_color_class = "GREEN";
        } else {
            root.thinking_color_class = "PURPLE";
        }

        root.thinking_color_reference = get_rgb_class_color(thinking_color_class);
    }
    
    VerticalBox {
        padding: 100px;
        alignment: start;

        Text {
            text: "Data Capturer Metrics";
            font-family: "Source Sans Pro";
            font-size: 50px;
            color: #000000;
        }

        HorizontalBox {
            alignment: center;

            VerticalBox {
                alignment: center;

                HorizontalBox {
                    alignment: center;

                     t3_electrode := ElectrodeChart {
                        width: 300px;
                        height: 300px;

                        render_signal_plot(name, values, width, height) => {
                            return render_signal_plot(name, values, width, height);
                        }
                     }

                     t4_electrode := ElectrodeChart {
                        width: 300px;
                        height: 300px;
                        
                        render_signal_plot(name, values, width, height) => {
                            return render_signal_plot(name, values, width, height);
                        }
                     }
                }

                HorizontalBox {
                    alignment: center;

                     o1_electrode := ElectrodeChart {
                        width: 300px;
                        height: 300px;

                        render_signal_plot(name, values, width, height) => {
                            return render_signal_plot(name, values, width, height);
                        }
                     }

                     o2_electrode := ElectrodeChart {
                        width: 300px;
                        height: 300px;
                        
                        render_signal_plot(name, values, width, height) => {
                            return render_signal_plot(name, values, width, height);
                        }
                     }
                }
            }
        }

        HorizontalBox {
            alignment: start;

            Text {
                text: "Thinking color: ";
                font-family: "Source Sans Pro";
                font-size: 20px;
                color: #000000;
            }

            Text {
                text: root.thinking_color_class;
                font-family: "Source Sans Pro";
                font-size: 20px;
                color: root.thinking_color_reference;
            }
        }
    }

    Timer {
        interval: 100ms;
        running: true;
        triggered => {
            root.update-counter += 1;
        }
    }
}