import { VerticalBox, GroupBox, HorizontalBox, GridBox } from "std-widgets.slint";
import { ElectrodeFeedback, MorphicBackground, PageComponent, ElectrodeChart } from "../components/index.slint";
import "../../assets/fonts/SourceSansPro-ExtraLight.ttf";

export component DataCapturerView inherits PageComponent {
    // Properties
    property <int> update-counter: 0;
    property <string> thinking-color-class: "UNKNOWN";
    property <color> thinking-color-reference: #FF0000;

    min-width: 1280px;
    min-height: 720px;

    // Callbacks for plot the chart
    pure callback render_signal_plot(name: string, values: [float], width: length, height: length) -> image;

    // Pure functions for pass to color the correct class
    pure function get_rgb_class_color(color: string) -> color {
        if (color == "RED") {
            return #FF0000;
        } else if (color == "GREEN") {
            return #00FF00;
        } else {
            return #FF00FF;
        }
    }

    // Public function for set the thinking color or data
    public function update_headset_data(t3: [float], t4: [float], o1: [float], o2: [float]) {
        if (t3.length > 0) {
            t3_electrode.update_electrode_data("T3", t3);
        }
        if (t4.length > 0) {
            t4_electrode.update_electrode_data("T4", t4);
        }
        if (o1.length > 0) {
            o1_electrode.update_electrode_data("O1", o1);
        }
        if (o2.length > 0) {
            o2_electrode.update_electrode_data("O2", o2);
        }
    }

    public function update_thinking_color(color: string) {
        if (color == "red") {
            root.thinking-color-class = "RED";
        } else if (color == "green") {
            root.thinking-color-class = "GREEN";
        } else {
            root.thinking-color-class = "PURPLE";
        }

        root.thinking-color-reference = get_rgb_class_color(thinking-color-class);
    }

    VerticalBox {
        // width: 100%;
        // height: 100%;
        padding: 25px;
        alignment: start;

        HorizontalBox {
            spacing: self.width * 55%;
            padding: 0px;

            Text {
                text: "Data Capturer Metrics";
                font-family: "Source Sans Pro";
                font-size: 50px;
                color: #000000;
            }

            HorizontalBox {
                alignment: start;

                Text {
                    text: "Thinking color: ";
                    font-family: "Source Sans Pro";
                    font-size: 20px;
                    color: #000000;
                    vertical-alignment: center;
                }
    
                Text {
                    text: root.thinking-color-class;
                    font-family: "Source Sans Pro";
                    font-size: 20px;
                    color: root.thinking-color-reference;
                    vertical-alignment: center;
                }
            }
        }

        GridBox {
            spacing-horizontal: 15px;
            spacing-vertical: 15px;
            width: 100%;
            height: 100%;

            padding: 5px;
            
            Row {
                t3_electrode := ElectrodeChart {
                    width: 50%;
                    height: 40%;
                    visible: root.visible;

                    render_signal_plot(name, values, width, height) => {
                        return render_signal_plot(name, values, width, height);
                    }
                }

                t4_electrode := ElectrodeChart {
                    width: 50%;
                    height: 40%;
                    visible: root.visible;

                    render_signal_plot(name, values, width, height) => {
                        return render_signal_plot(name, values, width, height);
                    }
                }
            }

            Row {
                o1_electrode := ElectrodeChart {
                    width: 50%;
                    height: 40%;
                    visible: root.visible;

                    render_signal_plot(name, values, width, height) => {
                        return render_signal_plot(name, values, width, height);
                    }
                }

                o2_electrode := ElectrodeChart {
                    width: 50%;
                    height: 40%;
                    visible: root.visible;

                    render_signal_plot(name, values, width, height) => {
                        return render_signal_plot(name, values, width, height);
                    }
                }
            }
        }
    }

    Timer {
        interval: 100ms;
        running: true;
        triggered => {
            root.update-counter += 1;
        }
    }
}
