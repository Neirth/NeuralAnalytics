export component ElectrodeChart inherits Rectangle {
    property <string> name;
    property <[float]> values: [];
    property <image> rendered_image: values.length > 0 ? render_signal_plot(name, values, self.width, self.height) : @image-url("");
    property <bool> is_rendered: rendered_image.height > 0 && rendered_image.width > 0;

    pure callback render_signal_plot(name: string, values: [float], width: length, height: length) -> image;

    public function update_electrode_data(name: string, values: [float]) {
        root.name = name;
        root.values = values;
    }

    if is_rendered: Image {
        source: rendered_image;
        width: 100%;
        height: 100%;
        padding: 8px;
    }

    if !is_rendered: VerticalLayout {
        width: 100%;
        height: 100%;
        padding: 8px;
        spacing: 10px;

        Rectangle {
            height: 20px;
            width: 80px;
            background: rgba(224, 224, 224, 0.4 + 0.5 * sin(animation-tick() / 1800ms * 360deg));
        }

        Rectangle {
            background: rgba(224, 224, 224, 0.4 + 0.25 * sin(animation-tick() / 1800ms * 360deg));

            Path {
                width: parent.width;
                height: parent.height * 0.6;
                y: parent.height * 0.2;
                stroke: rgba(255, 255, 255, 0.9);
                stroke-width: 2px;
                viewbox-width: 100;
                viewbox-height: 50;
                commands: "M 0,25 C 10,10 20,40 30,25 C 40,10 50,40 60,25 C 70,10 80,40 90,25 L 100,25";
            }
        }
    }
    
    // Change the image when the values change
    changed values => {
        if values.length > 0 {
            root.rendered_image = render_signal_plot(name, values, self.width, self.height);
            is_rendered = root.rendered_image.height > 0 && root.rendered_image.width > 0;
        } else {
            is_rendered = false;
        }
    }

    changed width => {
        if values.length > 0 {
            root.rendered_image = render_signal_plot(name, values, self.width, self.height);
            is_rendered = root.rendered_image.height > 0 && root.rendered_image.width > 0;
        } else {
            is_rendered = false;
        }
    }

    changed height => {
        if values.length > 0 {
            root.rendered_image = render_signal_plot(name, values, self.width, self.height);
            is_rendered = root.rendered_image.height > 0 && root.rendered_image.width > 0;
        } else {
            is_rendered = false;
        }
    }
}
